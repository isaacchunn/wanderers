// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  UV // Unverified
  L1 // Basic
  L2
  L3
  L4
  L5
}

enum TokenContext {
  email_confirmation
  reset_password
}

enum ItineraryVisibility {
  public
  private
}

enum ExpenseSplitType {
  split
  no_split
}

model UserToken {
  id         String       @id @default(uuid())
  context    TokenContext
  token      String       @db.VarChar(255)
  sent_to    String       @db.VarChar(255)
  created_at DateTime     @db.Timestamptz(6)
  updated_at DateTime     @db.Timestamptz(6)

  @@unique([id, token])
  @@map("UserTokens")
}

model User {
  id                       Int             @id @default(autoincrement())
  username                 String
  email                    String
  password                 String
  media                    String
  role                     UserRole
  email_verified           DateTime?
  user_photo               String?
  profile_description      String?
  created_at               DateTime        @db.Timestamptz(6)
  itineraries              Itinerary[]     @relation("OwnerItineraries")
  collaborated_itineraries Itinerary[]     @relation("Collaborators")
  chat_messages            ChatMessage[]   @relation("ChatMessages")
  itinerary_votes          ItineraryVote[]

  @@map("Users")
}

model Itinerary {
  id            Int                 @id @default(autoincrement())
  title         String
  location      String
  owner         User                @relation("OwnerItineraries", fields: [owner_id], references: [id])
  owner_id      Int
  collaborators User[]              @relation("Collaborators")
  activities    Activity[]
  votes         ItineraryVote[]
  visibility    ItineraryVisibility
  chat_messages ChatMessage[]
  photo_url     String?
  start_date    DateTime
  end_date      DateTime
  active        Boolean             @default(true)
  created_at    DateTime            @default(now())
  updated_at    DateTime            @updatedAt

  @@map("Itineraries")
}

model Activity {
  id                        Int              @id @default(autoincrement())
  title                     String
  description               String?
  lat                       Float
  lon                       Float
  itinerary                 Itinerary        @relation(fields: [itinerary_id], references: [id])
  itinerary_id              Int
  expense                   Float
  split                     ExpenseSplitType
  sequence                  Int
  photo_url                 String?
  start_date                DateTime
  end_date                  DateTime
  active                    Boolean          @default(true)
  created_at                DateTime         @default(now())

  // New Google Places API fields
  place_id                  String?          @unique
  formatted_address         String?
  types                     String[]         // Array of place types
  rating                    Float?
  user_ratings_total        Int?
  international_phone_number String?
  website                   String?
  opening_hours             String[]         // Array of opening hours
  google_maps_url           String?
  
  @@map("Activities")
}

model ItineraryVote {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [user_id], references: [id])
  user_id      Int
  itinerary    Itinerary @relation(fields: [itinerary_id], references: [id])
  itinerary_id Int
  created_at   DateTime  @default(now())

  @@unique([user_id, itinerary_id])
  @@map("ItineraryVotes")
}

model ChatMessage {
  id                 Int       @id @default(autoincrement())
  chat_message       String
  chat_message_by    User      @relation("ChatMessages", fields: [chat_message_by_id], references: [id])
  chat_message_by_id Int
  itinerary          Itinerary @relation(fields: [itinerary_id], references: [id])
  itinerary_id       Int
  active             Boolean   @default(true)
  created_at         DateTime  @default(now())

  @@map("ChatMessages")
}
